/*
 * AIPilot Submission Server API
 *
 * API for managing AIPilot submissions and battle matches
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for typed errors of method [`get_ai_pilots`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAiPilotsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_match_results`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetMatchResultsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`start_manual_fight`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum StartManualFightError {
    Status400(models::Error),
    Status404(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`upload_ai_pilot`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UploadAiPilotError {
    Status400(models::Error),
    Status403(models::Error),
    UnknownValue(serde_json::Value),
}

/// Retrieve AIPilots based on optional query parameters
pub async fn get_ai_pilots(
    configuration: &configuration::Configuration,
    name: Option<&str>,
    id: Option<&str>,
) -> Result<Vec<models::AiPilot>, Error<GetAiPilotsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_name = name;
    let p_id = id;

    let uri_str = format!("{}/aipilot", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_name {
        req_builder = req_builder.query(&[("name", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_id {
        req_builder = req_builder.query(&[("id", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::AiPilot&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::AiPilot&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetAiPilotsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Retrieve match results based on optional query parameters
pub async fn get_match_results(
    configuration: &configuration::Configuration,
    aip_id: Option<&str>,
    version: Option<&str>,
    id: Option<&str>,
) -> Result<Vec<models::MatchResult>, Error<GetMatchResultsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_aip_id = aip_id;
    let p_version = version;
    let p_id = id;

    let uri_str = format!("{}/matches", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_aip_id {
        req_builder = req_builder.query(&[("aipId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_version {
        req_builder = req_builder.query(&[("version", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_id {
        req_builder = req_builder.query(&[("id", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `Vec&lt;models::MatchResult&gt;`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `Vec&lt;models::MatchResult&gt;`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetMatchResultsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Start a manual battle between two AIPilots
pub async fn start_manual_fight(
    configuration: &configuration::Configuration,
    aip_id1: &str,
    aip_id2: &str,
) -> Result<models::StartManualFight200Response, Error<StartManualFightError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_aip_id1 = aip_id1;
    let p_aip_id2 = aip_id2;

    let uri_str = format!("{}/fight/", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("aipId1", &p_aip_id1.to_string())]);
    req_builder = req_builder.query(&[("aipId2", &p_aip_id2.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::StartManualFight200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::StartManualFight200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<StartManualFightError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Upload a new version of an AIPilot or create a new AIPilot
pub async fn upload_ai_pilot(
    configuration: &configuration::Configuration,
    name: &str,
    body: Vec<u8>,
    owner_id: Option<&str>,
) -> Result<models::UploadAiPilot200Response, Error<UploadAiPilotError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_name = name;
    let p_body = body;
    let p_owner_id = owner_id;

    let uri_str = format!("{}/aipilot", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    req_builder = req_builder.query(&[("name", &p_name.to_string())]);
    if let Some(ref param_value) = p_owner_id {
        req_builder = req_builder.query(&[("ownerId", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("authorization", value);
    };
    req_builder = req_builder.body(p_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::UploadAiPilot200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::UploadAiPilot200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UploadAiPilotError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
