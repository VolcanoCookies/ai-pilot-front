/*
 * AIPilot Submission Server API
 *
 * API for managing AIPilot submissions and battle matches
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use schemars::JsonSchema;
use serde::{Deserialize, Serialize};
use serde_repr::{Deserialize_repr, Serialize_repr};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, JsonSchema)]
pub struct MatchResult {
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    #[serde(rename = "teamA")]
    pub team_a: models::TeamInfo,
    #[serde(rename = "teamB")]
    pub team_b: models::TeamInfo,
    /// Winner team: 0=Allied, 1=Enemy, 2=Unknown
    #[serde(rename = "winner")]
    pub winner: Winner,
    #[serde(rename = "manualRun")]
    pub manual_run: bool,
    #[serde(rename = "createdAt")]
    pub created_at: i64,
    #[serde(rename = "normalizedName")]
    pub normalized_name: String,
    #[serde(rename = "replayId")]
    pub replay_id: Option<String>,
}

impl MatchResult {
    pub fn new(
        id: uuid::Uuid,
        team_a: models::TeamInfo,
        team_b: models::TeamInfo,
        winner: Winner,
        manual_run: bool,
        created_at: i64,
        normalized_name: String,
        replay_id: Option<String>,
    ) -> MatchResult {
        MatchResult {
            id,
            team_a,
            team_b,
            winner,
            manual_run,
            created_at,
            normalized_name,
            replay_id,
        }
    }
}
/// Winner team: 0=Allied, 1=Enemy, 2=Unknown
#[derive(
    Clone,
    Copy,
    Debug,
    Eq,
    PartialEq,
    Ord,
    PartialOrd,
    Hash,
    Serialize_repr,
    Deserialize_repr,
    JsonSchema,
)]
#[repr(u8)]
pub enum Winner {
    TeamA = 0,
    TeamB = 1,
    Unknown = 2,
}

impl Default for Winner {
    fn default() -> Winner {
        Self::TeamA
    }
}
