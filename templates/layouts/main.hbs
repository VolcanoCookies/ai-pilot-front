<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Pilot</title>
    
    <!-- Open Graph meta tags -->
    <meta property="og:title" content="AI Pilot">
    <meta property="og:description" content="AI Pilot - Upload your AI pilots and compete">
    <meta property="og:type" content="website">
    <meta property="og:url" content="{{#if canonical_url}}{{canonical_url}}{{else}}{{@root.request.uri}}{{/if}}">
    <meta property="og:image" content="/static/images/favicon.ico">
    <meta property="og:site_name" content="AI Pilot">
    
    <!-- Twitter Card meta tags -->
    <meta name="twitter:card" content="summary">
    <meta name="twitter:title" content="AI Pilot">
    <meta name="twitter:description" content="AI Pilot - Upload your AI pilots and compete">
    <meta name="twitter:image" content="/static/images/favicon.ico">
    
    <link rel="shortcut icon" href="/static/images/favicon.ico" type="image/x-icon">
    <link rel="icon" type="image/x-icon" href="/static/images/favicon.ico">

    <!-- Fonts: preconnect + preload + display=optional to avoid refresh-time swaps/blink -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link rel="preload" as="style" href="https://fonts.googleapis.com/css2?family=Inter:wght@300;800&display=optional">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@300;800&display=optional" media="print" onload="this.media='all'">
    <noscript>
        <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@300;800&display=optional">
    </noscript>
    <link rel="stylesheet" href="/static/css/master.css">

    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@24,400,0,0&icon_names=arrow_drop_down,content_copy,download,file_download_off,upload" />

    <script src="https://unpkg.com/htmx.org@2.0.4"></script>
    <script src="https://cdn.jsdelivr.net/npm/handlebars@latest/dist/handlebars.js"></script>
    
    <style>
        /* View Transitions for smooth SPA navigation */
        @view-transition {
            navigation: auto;
        }
        
        /* Optional: customize the transition */
        ::view-transition-old(root),
        ::view-transition-new(root) {
            animation-duration: 0.2s;
        }
        
        /* Subtle copy icon */
        .copy-value:hover {
            opacity: 1 !important;
        }
        
        /* Code block styling for copyable values */
        code.copy-value {
            background: rgba(255, 255, 255, 0.08);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 4px;
            padding: 2px 6px;
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            font-weight: 400;
            transition: background 0.2s, border-color 0.2s;
        }
        
        code.copy-value:hover {
            background: rgba(255, 255, 255, 0.12);
            border-color: rgba(255, 255, 255, 0.2);
        }
        
        /* Download icon styling */
        .material-symbols-rounded[title*="Download"]:hover,
        a.material-symbols-rounded:hover {
            color: var(--text) !important;
        }
        
        /* Disabled icon styling */
        .material-symbols-rounded[style*="--text-disabled"] {
            --text-disabled: rgba(166, 179, 194, 0.4); /* Muted text with lower opacity */
        }
        
        /* Match result colors - pastel green for winner, pastel red for loser */
        .match-winner {
            color: #81c784; /* Pastel green */
        }
        
        .match-loser {
            color: #e57373; /* Pastel red */
        }
        
        /* Build info styling */
        .build-info {
            position: fixed;
            bottom: 10px;
            left: 10px;
            font-size: 10px;
            color: rgba(166, 179, 194, 0.5);
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            background: rgba(0, 0, 0, 0.1);
            padding: 2px 6px;
            border-radius: 3px;
            backdrop-filter: blur(2px);
            pointer-events: none;
            z-index: 1000;
        }
        
        .build-info .build-hash::after {
            content: " • ";
            opacity: 0.7;
        }
        
        {{#if pageStyles}}
        {{{pageStyles}}}
        {{/if}}
    </style>
    
    {{#if additionalHead}}
    {{{additionalHead}}}
    {{/if}}
</head>

<body>
    {{> partials/navbar }}
    
    <!-- Wrap the main content in a container for easy replacement -->
    <main id="page-container">
        {{> @partial-block}}
    </main>

    <!-- htmx for partial HTML over-the-wire updates -->

    <script>
        {{#if pageScripts}}
        {{{pageScripts}}}
        {{/if}}
    </script>

    <script>
        // Modern SPA navigation using View Transitions API
        document.addEventListener('DOMContentLoaded', () => {
            // Handle copy value buttons (using event delegation for dynamic content)
            document.body.addEventListener('click', async (e) => {
                if (e.target.classList.contains('copy-value')) {
                    const value = e.target.getAttribute('data-value');
                    try {
                        await navigator.clipboard.writeText(value);
                        // Show brief feedback
                        const originalText = e.target.textContent;
                        const originalTitle = e.target.title;
                        e.target.textContent = '✓';
                        e.target.title = 'Copied!';
                        setTimeout(() => {
                            e.target.textContent = originalText;
                            e.target.title = originalTitle;
                        }, 1000);
                    } catch (err) {
                        console.error('Failed to copy value:', err);
                        // Fallback for older browsers
                        const textArea = document.createElement('textarea');
                        textArea.value = value;
                        textArea.style.position = 'fixed';
                        textArea.style.left = '-999999px';
                        document.body.appendChild(textArea);
                        textArea.focus();
                        textArea.select();
                        try {
                            document.execCommand('copy');
                            const originalText = e.target.textContent;
                            e.target.textContent = '✓';
                            setTimeout(() => {
                                e.target.textContent = originalText;
                            }, 1000);
                        } catch (fallbackErr) {
                            console.error('Fallback copy failed:', fallbackErr);
                        }
                        document.body.removeChild(textArea);
                    }
                    return; // Don't process as navigation
                }
                
                // Existing navigation logic
                const link = e.target.closest('a');
                
                // Only handle internal navigation links
                if (link && link.href && link.origin === window.location.origin && 
                    !link.hash && link.target !== '_blank' && 
                    link.href !== window.location.href) {
                    
                    e.preventDefault();
                    
                    // Use View Transitions if supported, otherwise fall back to regular navigation
                    if (document.startViewTransition) {
                        document.startViewTransition(() => navigateToPage(link.href));
                    } else {
                        await navigateToPage(link.href);
                    }
                }
            });

            // Handle browser back/forward buttons
            window.addEventListener('popstate', () => {
                if (document.startViewTransition) {
                    document.startViewTransition(() => navigateToPage(window.location.href));
                } else {
                    navigateToPage(window.location.href);
                }
            });

            async function navigateToPage(url) {
                try {
                    const response = await fetch(url);
                    if (!response.ok) throw new Error('Network response was not ok');
                    
                    const html = await response.text();
                    const parser = new DOMParser();
                    const newDoc = parser.parseFromString(html, 'text/html');
                    
                    // Update the page content
                    const newContent = newDoc.getElementById('page-container');
                    const currentContent = document.getElementById('page-container');
                    
                    if (newContent && currentContent) {
                        currentContent.innerHTML = newContent.innerHTML;
                        
                        // Update document title
                        document.title = newDoc.title;
                        
                        // Update URL if not already there
                        if (window.location.href !== url) {
                            window.history.pushState({}, '', url);
                        }
                        
                        // Re-execute any scripts in the new content
                        const scripts = currentContent.querySelectorAll('script');
                        scripts.forEach(oldScript => {
                            const newScript = document.createElement('script');
                            Array.from(oldScript.attributes).forEach(attr => {
                                newScript.setAttribute(attr.name, attr.value);
                            });
                            newScript.textContent = oldScript.textContent;
                            oldScript.parentNode.replaceChild(newScript, oldScript);
                        });
                        
                        // Process HTMX elements in the new content to ensure they're activated
                        if (window.htmx) {
                            window.htmx.process(currentContent);
                        }
                    }
                } catch (error) {
                    console.error('Navigation failed:', error);
                    // Fallback to full page load
                    window.location.href = url;
                }
            }
        });
    </script>
    
    {{#if additionalScripts}}
    {{{additionalScripts}}}
    {{/if}}

    <!-- Build Info -->
    {{#if build_info}}
    <div class="build-info">
        <span class="build-hash">{{build_info.git_hash}}</span>
        <span class="build-timestamp">{{build_info.build_date}}</span>
    </div>
    {{/if}}

</body>

</html>